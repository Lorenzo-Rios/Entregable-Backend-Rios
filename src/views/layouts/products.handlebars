<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Productos</title>
</head>
<body style="font-family: Arial, sans-serif; background-color: #f5f5f5; color: #333; padding: 20px;">
    <h1 style="text-align: center; color: #007bff;">Productos</h1>

    <ul style="list-style-type: none; padding: 0;">
        {{#each products}}
        <li style="background-color: #fff; padding: 15px; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); margin-bottom: 20px;">
            <strong>Producto:</strong> {{this.tittle}} <br>
            <strong>Descripción:</strong> {{this.description}} <br>
            <strong>Precio:</strong> ${{this.price}} <br>
            <strong>Stock:</strong> {{this.stock}} <br>

            <!-- Campo para seleccionar la cantidad -->
            <label for="quantity-{{this._id}}" style="display: block; margin-top: 10px;">Cantidad:</label>
            <input type="number" id="quantity-{{this._id}}" min="1" max="{{this.stock}}" value="1" 
                style="width: 60px; padding: 5px; border: 1px solid #ddd; border-radius: 4px;">

            <!-- Botón para agregar al carrito -->
            <button onclick="addToCart('{{this._id}}')" style="margin-top: 10px; padding: 8px 12px; background-color: #28a745; color: #fff; border: none; border-radius: 4px; cursor: pointer;">
                Agregar al Carrito
            </button>

            <!-- Botón para eliminar producto, solo para administradores -->
            <button onclick="deleteProduct('{{this._id}}')" style="margin-top: 10px; padding: 8px 12px; background-color: #dc3545; color: #fff; border: none; border-radius: 4px; cursor: pointer;">
                Eliminar Producto
            </button>

            <!-- Botón para actualizar producto -->
            <button onclick="toggleUpdateForm('{{this._id}}')" style="margin-top: 10px; padding: 8px 12px; background-color: #007bff; color: #fff; border: none; border-radius: 4px; cursor: pointer;">
                Actualizar
            </button>

<!-- Formulario para actualizar producto (oculto por defecto) -->
            <form id="update-form-{{this._id}}" onsubmit="updateProduct('{{this._id}}'); return false;" style="display: none; margin-top: 10px; padding: 15px; border: 1px solid #ddd; border-radius: 8px; background-color: #f9f9f9;">
                <h3 style="margin-top: 0; margin-bottom: 10px; color: #007bff;">Actualizar Producto</h3>
                <div style="display: flex; flex-direction: column; gap: 10px;">
                    <label for="tittle-{{this._id}}" style="font-weight: bold;">Título:</label>
                    <input type="text" id="tittle-{{this._id}}" value="{{this.tittle}}" required
                        style="padding: 8px; border: 1px solid #ccc; border-radius: 4px;">

                    <label for="description-{{this._id}}" style="font-weight: bold;">Descripción:</label>
                    <input type="text" id="description-{{this._id}}" value="{{this.description}}" required
                        style="padding: 8px; border: 1px solid #ccc; border-radius: 4px;">

                    <label for="price-{{this._id}}" style="font-weight: bold;">Precio:</label>
                    <input type="number" id="price-{{this._id}}" value="{{this.price}}" required
                        style="padding: 8px; border: 1px solid #ccc; border-radius: 4px;">

                    <label for="stock-{{this._id}}" style="font-weight: bold;">Stock:</label>
                    <input type="number" id="stock-{{this._id}}" value="{{this.stock}}" required
                        style="padding: 8px; border: 1px solid #ccc; border-radius: 4px;">

                    <label for="code-{{this._id}}" style="font-weight: bold;">Código:</label>
                    <input type="text" id="code-{{this._id}}" value="{{this.code}}" required
                        style="padding: 8px; border: 1px solid #ccc; border-radius: 4px;">

                    <button type="submit" style="margin-top: 10px; padding: 10px 15px; background-color: #28a745; color: #fff; border: none; border-radius: 4px; cursor: pointer;">Actualizar Producto</button>
                </div>
            </form>
        </li>
        {{/each}}
    </ul>

    <div class="pagination" style="text-align: center; margin-top: 20px;">
        {{#if hasPrevPage}}
            <a href="{{prevLink}}" style="padding: 8px 12px; background-color: #007bff; color: #fff; text-decoration: none; border-radius: 4px; margin-right: 10px;">Anterior</a>
        {{/if}}

        <!-- Mostrar página actual -->
        <span style="font-size: 16px; color: #333;">Página {{currentPage}} de {{totalPages}}</span>

        {{#if hasNextPage}}
            <a href="{{nextLink}}" style="padding: 8px 12px; background-color: #007bff; color: #fff; text-decoration: none; border-radius: 4px; margin-left: 10px;">Siguiente</a>
        {{/if}}
    </div>

    <script>
        // ID fijo del carrito, ajusta si es necesario
        const cartId = '66f7728452336cfd1dc02875'; 

        function addToCart(productId) {
            console.log(productId);
            const quantity = document.getElementById(`quantity-${productId}`).value;

            fetch(`/api/cart/${cartId}/products/${productId}`, { 
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ quantity })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log('Producto agregado al carrito:', data);
                alert('Producto agregado al carrito');
            })
            .catch(error => {
                console.error('Error al agregar el producto al carrito:', error);
                alert('Error al agregar el producto al carrito');
            });
        }

        function deleteProduct(productId) {
            const token = localStorage.getItem('token'); // Obtener el token almacenado en localStorage

            fetch(`/api/product/${productId}`, { 
                method: 'DELETE',
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => { throw new Error(data.error || 'Error desconocido'); });
                }
                return response.json();
            })
            .then(data => {
                console.log('Producto eliminado:', data);
                alert('Producto eliminado correctamente');
                location.reload(); // Recargar la página para actualizar la lista de productos
            })
            .catch(error => {
                console.error('Error al eliminar el producto:', error);
                alert('Error al eliminar el producto');
            });
        }

        function toggleUpdateForm(productId) {
            const form = document.getElementById(`update-form-${productId}`);
            form.style.display = form.style.display === 'none' ? 'block' : 'none';
        }

    function updateProduct(productId) {
            // Obtener los valores del formulario de actualización
            const tittle = document.getElementById(`tittle-${productId}`).value;
            const description = document.getElementById(`description-${productId}`).value;
            const price = parseFloat(document.getElementById(`price-${productId}`).value);
            const stock = parseInt(document.getElementById(`stock-${productId}`).value);
            const code = document.getElementById(`code-${productId}`).value;  

            // Verificar que todos los campos estén completos
            if (!tittle || !description || !price || !stock || !code) {
                alert('Todos los campos son requeridos');
                return;
            }

            const productData = { tittle, description, price, stock, code };

            fetch(`/api/product/${productId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(productData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => { throw new Error(data.error || 'Error desconocido'); });
                }
                return response.json();
            })
            .then(data => {
                console.log('Producto actualizado:', data);
                alert('Producto actualizado con éxito');
                location.reload();  // Recargar la página
            })
            .catch(error => {
                console.error('Error al actualizar el producto:', error);
                alert('Error al actualizar el producto: ' + error.message);
            });
        }
    </script>
</body>
</html>