<h1>Productos en Tiempo Real</h1>

<form id="productForm">
    <label for="tittle">Título</label>
    <input type="text" id="tittle" name="tittle" placeholder="Título del producto" required>

    <label for="description">Descripción</label>
    <input type="text" id="description" name="description" placeholder="Descripción del producto">

    <label for="code">Código</label>
    <input type="text" id="code" name="code" placeholder="Código único del producto" required>

    <label for="price">Precio</label>
    <input type="number" id="price" name="price" placeholder="Precio del producto" required>

    <label for="stock">Stock</label>
    <input type="number" id="stock" name="stock" placeholder="Cantidad disponible" required>

    <button type="submit">Agregar Producto</button>
</form>

<ul id="productsList">
    <!-- Aquí se renderizarán los productos en tiempo real -->
</ul>

<script src="/socket.io/socket.io.js"></script>
<script>
    const socket = io();
    const form = document.getElementById('productForm');
    const productList = document.getElementById('productsList');

    // Escuchar el evento de envío del formulario
    form.addEventListener('submit', async (event) => {
        event.preventDefault();

        // Capturar los datos del formulario
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
            const response = await fetch('/api/product', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                form.reset(); // Limpiar el formulario después de agregar el producto
            } else {
                console.error('Error al agregar el producto');
            }
        } catch (error) {
            console.error('Error en la solicitud:', error);
        }
    });

    // Escuchar el evento 'productList' desde el servidor para actualizar la lista de productos en tiempo real
    socket.on('productList', (products) => {
        productList.innerHTML = ''; // Limpiar la lista existente

        products.forEach((product) => {
            const li = document.createElement('li');
            li.textContent = `${product.tittle} - $${product.price} - Stock disponible: ${product.stock} - Código: ${product.code}`;

            // Botón para eliminar producto
            const deleteButton = document.createElement('button');
            deleteButton.textContent = 'Eliminar';
            deleteButton.onclick = async () => {
                try {
                    const response = await fetch(`/api/product/${product._id}`, {
                        method: 'DELETE'
                    });
                    const message = await response.text();

                    if (response.ok) {
                        console.log(message);
                    } else {
                        console.log('Error al eliminar el producto');
                    }
                } catch (error) {
                    console.error('Error en la eliminación:', error);
                }
            };

            li.appendChild(deleteButton);
            productList.appendChild(li);
        });
    });
</script>